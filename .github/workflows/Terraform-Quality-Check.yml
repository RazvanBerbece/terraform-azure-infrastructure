name: Terraform-Quality-Check

on:
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:

  terraform:

    name: Terraform Quality
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v2

      - uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_SERVICE_PROVIDER_TOKEN }}

      # Install Terraform & Terraform Cloud on the job woker + authenticate with the CLOUD TOKEN
      - name: Install Terraform & Authenticate on Terraform Cloud
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.1.6
          cli_config_credentials_token: ${{ secrets.TERRAFORM_CLOUD_TOKEN }}
      
      # Check that main.tf is consistently formatted
      - name: Run 'terraform fmt'
        id: fmt
        run: terraform fmt -check
      
      # Init the .terraform.lock.hcl (contains init state for providers, resources, etc.)
      - name: Run 'terraform init'
        id: init
        run: terraform init
      
      # Check that main.tf is syntactically correct & indented 
      - name: Run 'terraform validate'
        id: validate
        run: terraform validate -no-color
      
      # On PR events, comment on the PR with the terraform step statuses
      # The always() allows this step to run regardless of whether the step above failed, as we want to see the errors outputted by 'terraform plan'
      - name: Update Pull Request With Terraform Quality Step Outputs
        uses: actions/github-script@0.9.0
        if: github.event_name == 'pull_request' && always()
        with:
          github-token: ${{ secrets.GH_TOKEN }}
          script: |
            const output = `## Terraform Status Update 🤖
            ### This is an automated message generated by the Terraform-Quality-Check workflow run. It displays the statuses of the formatting, initialisation and validation of the Terraform source files.
            
            ### See the statuses below : 
            #### Terraform Format and Style 🖌\` -> ${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\` -> ${{ steps.init.outcome }}\`
            #### Terraform Validation ✅\` -> ${{ steps.validate.outcome }}\`


            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
